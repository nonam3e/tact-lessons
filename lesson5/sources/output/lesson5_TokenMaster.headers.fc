;;
;; Header files for TokenMaster
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $ChangeOwner$_load
(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline;

;; $ChangeOwnerOk$_store
builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline;

;; $ChangeOwnerOk$_store_cell
cell $ChangeOwnerOk$_store_cell((int, slice) v) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $Transfer$_load
(slice, ((int, int, slice, slice, cell, int, slice))) $Transfer$_load(slice sc_0) inline_ref;

;; $InternalTransfer$_store
builder $InternalTransfer$_store(builder build_0, (int, int, slice, slice, int, slice) v) inline_ref;

;; $InternalTransfer$_store_cell
cell $InternalTransfer$_store_cell((int, int, slice, slice, int, slice) v) inline;

;; $Excesses$_store
builder $Excesses$_store(builder build_0, (int) v) inline;

;; $Excesses$_store_cell
cell $Excesses$_store_cell((int) v) inline;

;; $BurnNotification$_load
(slice, ((int, int, slice))) $BurnNotification$_load(slice sc_0) inline;

;; $ChangeContent$_load
(slice, ((cell))) $ChangeContent$_load(slice sc_0) inline;

;; $ProvideWalletAddress$_load
(slice, ((int, slice, int))) $ProvideWalletAddress$_load(slice sc_0) inline;

;; $TakeWalletAddress$_store
builder $TakeWalletAddress$_store(builder build_0, (int, slice, slice) v) inline;

;; $TakeWalletAddress$_store_cell
cell $TakeWalletAddress$_store_cell((int, slice, slice) v) inline;

;; $TokenMaster$_store
builder $TokenMaster$_store(builder build_0, (int, int, slice, cell) v) inline;

;; $TokenMaster$_load
(slice, ((int, int, slice, cell))) $TokenMaster$_load(slice sc_0) inline;

;; $StateInit$_get_code
_ $StateInit$_get_code((cell, cell) v) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $MasterData$_to_external
(int, int, slice, cell, cell) $MasterData$_to_external(((int, int, slice, cell, cell)) v) inline;

;; $TokenWallet$init$_store
builder $TokenWallet$init$_store(builder build_0, (slice, slice) v) inline;

;; $TokenMaster$init$_load
(slice, ((slice, cell))) $TokenMaster$init$_load(slice sc_0) inline;

;; $TokenMaster$_contract_init
(int, int, slice, cell) $TokenMaster$_contract_init(slice $owner, cell $jetton_content) impure inline_ref;

;; $TokenMaster$_contract_load
(int, int, slice, cell) $TokenMaster$_contract_load() impure inline_ref;

;; $TokenMaster$_contract_store
() $TokenMaster$_contract_store((int, int, slice, cell) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Context$_fun_readForwardFee
int $Context$_fun_readForwardFee((int, slice, int, slice) $self) impure inline_ref;

;; $TokenWallet$_init_child
(cell, cell) $TokenWallet$_init_child(cell sys', slice $owner, slice $master) inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $MasterData$_constructor_total_supply_mintable_owner_jetton_content_jetton_wallet_code
((int, int, slice, cell, cell)) $MasterData$_constructor_total_supply_mintable_owner_jetton_content_jetton_wallet_code(int total_supply, int mintable, slice owner, cell jetton_content, cell jetton_wallet_code) inline;

;; $TokenMaster$_fun_get_jetton_data
((int, int, slice, cell), (int, int, slice, cell, cell)) $TokenMaster$_fun_get_jetton_data((int, int, slice, cell) $self) impure inline_ref;

;; $TokenMaster$_fun_get_wallet_address
((int, int, slice, cell), slice) $TokenMaster$_fun_get_wallet_address((int, int, slice, cell) $self, slice $owner_address) impure inline_ref;

;; $TokenMaster$_fun_forward
((int, int, slice, cell), ()) $TokenMaster$_fun_forward((int, int, slice, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $TokenMaster$_fun_reply
((int, int, slice, cell), ()) $TokenMaster$_fun_reply((int, int, slice, cell) $self, cell $body) impure inline;

;; $TokenMaster$_fun_notify
((int, int, slice, cell), ()) $TokenMaster$_fun_notify((int, int, slice, cell) $self, cell $body) impure inline;

;; $TokenMaster$_fun_requireOwner
((int, int, slice, cell), ()) $TokenMaster$_fun_requireOwner((int, int, slice, cell) $self) impure inline_ref;

;; $TokenMaster$_fun_owner
((int, int, slice, cell), slice) $TokenMaster$_fun_owner((int, int, slice, cell) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_bounce_body_data_code
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body_data_code(slice to, int value, int mode, int bounce, cell body, cell data, cell code) inline;

;; $InternalTransfer$_constructor_query_id_amount_from_response_destination_forward_ton_amount_forward_payload
((int, int, slice, slice, int, slice)) $InternalTransfer$_constructor_query_id_amount_from_response_destination_forward_ton_amount_forward_payload(int query_id, int amount, slice from, slice response_destination, int forward_ton_amount, slice forward_payload) inline;

;; $SendParameters$_constructor_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline;

;; $TakeWalletAddress$_constructor_query_id_wallet_address_owner_address
((int, slice, slice)) $TakeWalletAddress$_constructor_query_id_wallet_address_owner_address(int query_id, slice wallet_address, slice owner_address) inline;

;; $Excesses$_constructor_query_id
((int)) $Excesses$_constructor_query_id(int query_id) inline;

;; $ChangeOwnerOk$_constructor_queryId_newOwner
((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int queryId, slice newOwner) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
