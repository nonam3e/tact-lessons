;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

_ $StateInit$_get_code((cell, cell) v) inline {
    var (v'code, v'data) = v;
    return v'code;
}

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body_data_code(slice to, int value, int mode, int bounce, cell body, cell data, cell code) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline {
    return (true, to, value, mode, body, null(), null());
}

;;
;; Type: ChangeOwner
;; Header: 0x819dbe99
;; TLB: change_owner#819dbe99 queryId:uint64 newOwner:address = ChangeOwner
;;

(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2174598809);
    var v'queryId = sc_0~load_uint(64);
    var v'newOwner = sc_0~__tact_load_address();
    return (sc_0, (v'queryId, v'newOwner));
}

;;
;; Type: ChangeOwnerOk
;; Header: 0x327b2b4a
;; TLB: change_owner_ok#327b2b4a queryId:uint64 newOwner:address = ChangeOwnerOk
;;

builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline {
    var (v'queryId, v'newOwner) = v;
    build_0 = store_uint(build_0, 846932810, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = __tact_store_address(build_0, v'newOwner);
    return build_0;
}

cell $ChangeOwnerOk$_store_cell((int, slice) v) inline {
    return $ChangeOwnerOk$_store(begin_cell(), v).end_cell();
}

((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int queryId, slice newOwner) inline {
    return (queryId, newOwner);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: Transfer
;; Header: 0x0f817ea5
;; TLB: transfer#0f817ea5 query_id:uint64 amount:coins destination:address response_destination:address custom_payload:Maybe ^cell forward_ton_amount:coins forward_payload:remainder<slice> = Transfer
;;

(slice, ((int, int, slice, slice, cell, int, slice))) $Transfer$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 260144805);
    var v'query_id = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    var v'destination = sc_0~__tact_load_address();
    var v'response_destination = sc_0~__tact_load_address();
    var v'custom_payload = sc_0~load_int(1) ? sc_0~load_ref() : null();
    var v'forward_ton_amount = sc_0~load_coins();
    var v'forward_payload = sc_0;
    return (sc_0, (v'query_id, v'amount, v'destination, v'response_destination, v'custom_payload, v'forward_ton_amount, v'forward_payload));
}

;;
;; Type: InternalTransfer
;; Header: 0x178d4519
;; TLB: internal_transfer#178d4519 query_id:uint64 amount:coins from:address response_destination:address forward_ton_amount:coins forward_payload:remainder<slice> = InternalTransfer
;;

builder $InternalTransfer$_store(builder build_0, (int, int, slice, slice, int, slice) v) inline_ref {
    var (v'query_id, v'amount, v'from, v'response_destination, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 395134233, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'from);
    build_0 = __tact_store_address(build_0, v'response_destination);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $InternalTransfer$_store_cell((int, int, slice, slice, int, slice) v) inline {
    return $InternalTransfer$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, int, slice)) $InternalTransfer$_constructor_query_id_amount_from_response_destination_forward_ton_amount_forward_payload(int query_id, int amount, slice from, slice response_destination, int forward_ton_amount, slice forward_payload) inline {
    return (query_id, amount, from, response_destination, forward_ton_amount, forward_payload);
}

;;
;; Type: Excesses
;; Header: 0xd53276db
;; TLB: excesses#d53276db query_id:uint64 = Excesses
;;

builder $Excesses$_store(builder build_0, (int) v) inline {
    var (v'query_id) = v;
    build_0 = store_uint(build_0, 3576854235, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    return build_0;
}

cell $Excesses$_store_cell((int) v) inline {
    return $Excesses$_store(begin_cell(), v).end_cell();
}

((int)) $Excesses$_constructor_query_id(int query_id) inline {
    return (query_id);
}

;;
;; Type: BurnNotification
;; Header: 0x7bdd97de
;; TLB: burn_notification#7bdd97de query_id:uint64 amount:coins response_destination:address = BurnNotification
;;

(slice, ((int, int, slice))) $BurnNotification$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2078119902);
    var v'query_id = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    var v'response_destination = sc_0~__tact_load_address();
    return (sc_0, (v'query_id, v'amount, v'response_destination));
}

;;
;; Type: ChangeContent
;; Header: 0x10590ef2
;; TLB: change_content#10590ef2 jetton_content:^cell = ChangeContent
;;

(slice, ((cell))) $ChangeContent$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 274271986);
    var v'jetton_content = sc_0~load_ref();
    return (sc_0, (v'jetton_content));
}

;;
;; Type: ProvideWalletAddress
;; Header: 0x2c76b973
;; TLB: provide_wallet_address#2c76b973 query_id:uint64 owner_address:address include_address:bool = ProvideWalletAddress
;;

(slice, ((int, slice, int))) $ProvideWalletAddress$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 745978227);
    var v'query_id = sc_0~load_uint(64);
    var v'owner_address = sc_0~__tact_load_address();
    var v'include_address = sc_0~load_int(1);
    return (sc_0, (v'query_id, v'owner_address, v'include_address));
}

;;
;; Type: TakeWalletAddress
;; Header: 0xd1735400
;; TLB: take_wallet_address#d1735400 query_id:uint64 wallet_address:address owner_address:Maybe address = TakeWalletAddress
;;

builder $TakeWalletAddress$_store(builder build_0, (int, slice, slice) v) inline {
    var (v'query_id, v'wallet_address, v'owner_address) = v;
    build_0 = store_uint(build_0, 3513996288, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = __tact_store_address(build_0, v'wallet_address);
    build_0 = __tact_store_address_opt(build_0, v'owner_address);
    return build_0;
}

cell $TakeWalletAddress$_store_cell((int, slice, slice) v) inline {
    return $TakeWalletAddress$_store(begin_cell(), v).end_cell();
}

((int, slice, slice)) $TakeWalletAddress$_constructor_query_id_wallet_address_owner_address(int query_id, slice wallet_address, slice owner_address) inline {
    return (query_id, wallet_address, owner_address);
}

;;
;; Type: MasterData
;; TLB: _ total_supply:int257 mintable:bool owner:address jetton_content:^cell jetton_wallet_code:^cell = MasterData
;;

(int, int, slice, cell, cell) $MasterData$_to_external(((int, int, slice, cell, cell)) v) inline {
    var (v'total_supply, v'mintable, v'owner, v'jetton_content, v'jetton_wallet_code) = v; 
    return (v'total_supply, v'mintable, v'owner, v'jetton_content, v'jetton_wallet_code);
}

((int, int, slice, cell, cell)) $MasterData$_constructor_total_supply_mintable_owner_jetton_content_jetton_wallet_code(int total_supply, int mintable, slice owner, cell jetton_content, cell jetton_wallet_code) inline {
    return (total_supply, mintable, owner, jetton_content, jetton_wallet_code);
}

;;
;; Type: TokenWallet
;;

builder $TokenWallet$init$_store(builder build_0, (slice, slice) v) inline {
    var (v'owner, v'master) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'master);
    return build_0;
}

(cell, cell) $TokenWallet$_init_child(cell sys', slice $owner, slice $master) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: TokenWallet
    cell mine = __tact_dict_get_code(source, 56445);
    contracts = __tact_dict_set_code(contracts, 56445, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $TokenWallet$init$_store(b, ($owner, $master));
    return (mine, b.end_cell());
}

;;
;; Type: TokenMaster
;;

builder $TokenMaster$_store(builder build_0, (int, int, slice, cell) v) inline {
    var (v'total_supply, v'mintable, v'owner, v'jetton_content) = v;
    build_0 = build_0.store_coins(v'total_supply);
    build_0 = build_0.store_int(v'mintable, 1);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_ref(v'jetton_content);
    return build_0;
}

(slice, ((int, int, slice, cell))) $TokenMaster$_load(slice sc_0) inline {
    var v'total_supply = sc_0~load_coins();
    var v'mintable = sc_0~load_int(1);
    var v'owner = sc_0~__tact_load_address();
    var v'jetton_content = sc_0~load_ref();
    return (sc_0, (v'total_supply, v'mintable, v'owner, v'jetton_content));
}

(slice, ((slice, cell))) $TokenMaster$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'jetton_content = sc_0~load_ref();
    return (sc_0, (v'owner, v'jetton_content));
}

(int, int, slice, cell) $TokenMaster$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$TokenMaster$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner, cell jetton_content) = $sc~$TokenMaster$init$_load();
        $sc.end_parse();
        return $TokenMaster$_contract_init(owner, jetton_content);
    }
}

() $TokenMaster$_contract_store((int, int, slice, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $TokenMaster$_store(b, v);
    set_data(b.end_cell());
}