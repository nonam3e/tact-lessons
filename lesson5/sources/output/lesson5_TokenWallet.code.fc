#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "lesson5_TokenWallet.headers.fc";
#include "lesson5_TokenWallet.stdlib.fc";
#include "lesson5_TokenWallet.storage.fc";

;;
;; Contract TokenWallet functions
;;

(int, slice, slice) $TokenWallet$_contract_init(slice $owner, slice $master) impure inline_ref {
    var (($self'balance, $self'owner, $self'master)) = (0, null(), null());
    $self'owner = $owner;
    $self'master = $master;
    return ($self'balance, $self'owner, $self'master);
}

((int, slice, slice), (int, slice, slice, cell)) $TokenWallet$_fun_get_wallet_data((int, slice, slice) $self) impure inline_ref {
    var (($self'balance, $self'owner, $self'master)) = $self;
    return (($self'balance, $self'owner, $self'master), $WalletData$_constructor_balance_owner_master_code($self'balance, $self'owner, $self'master, $StateInit$_get_code($TokenWallet$_init_child(__tact_context_sys, $self'owner, $self'master))));
}

;;
;; Receivers of a Contract TokenWallet
;;

(((int, slice, slice)), ()) $TokenWallet$_internal_binary_Transfer((int, slice, slice) $self, (int, int, slice, slice, cell, int, slice) $msg) impure inline {
    var ($self'balance, $self'owner, $self'master) = $self;
    var ($msg'query_id, $msg'amount, $msg'destination, $msg'response_destination, $msg'custom_payload, $msg'forward_ton_amount, $msg'forward_payload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(4429, ( __tact_slice_eq_bits($ctx'sender, $self'owner) ));
    $self'balance = ($self'balance - $msg'amount);
    throw_unless(54227, ($self'balance >= 0));
    throw_unless(51724, ((((($Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)) * 2) + (2 * 20000000)) + 10000000) + $msg'forward_ton_amount) < $ctx'value));
    var ($init'code, $init'data) = $TokenWallet$_init_child(__tact_context_sys, $msg'destination, $self'master);
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body_data_code($global_contractAddress(($init'code, $init'data)), 0, 64, true, $InternalTransfer$_store_cell($InternalTransfer$_constructor_query_id_amount_from_response_destination_forward_ton_amount_forward_payload($msg'query_id, $msg'amount, $self'owner, $msg'response_destination, $msg'forward_ton_amount, $msg'forward_payload)), $init'data, $init'code));
    return (($self'balance, $self'owner, $self'master), ());
}

(((int, slice, slice)), ()) $TokenWallet$_internal_binary_InternalTransfer((int, slice, slice) $self, (int, int, slice, slice, int, slice) $msg) impure inline {
    var ($self'balance, $self'owner, $self'master) = $self;
    var ($msg'query_id, $msg'amount, $msg'from, $msg'response_destination, $msg'forward_ton_amount, $msg'forward_payload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    if (( ~ __tact_slice_eq_bits($self'master, $ctx'sender) )) {
        var ($init'code, $init'data) = $TokenWallet$_init_child(__tact_context_sys, $msg'from, $self'master);
        throw_unless(4429, ( __tact_slice_eq_bits($ctx'sender, $global_contractAddress(($init'code, $init'data))) ));
    }
    $self'balance = ($self'balance + $msg'amount);
    throw_unless(54227, ($self'balance >= 0));
    int $msgValue = $ctx'value;
    $msgValue = (($msgValue - 20000000) - (10000000 - min(10000000, (__tact_my_balance() - $ctx'value))));
    if (($msg'forward_ton_amount > 0)) {
        $msgValue = (($msgValue - $msg'forward_ton_amount) - $Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)));
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($self'owner, $msg'forward_ton_amount, 1, false, $TransferNotification$_store_cell($TransferNotification$_constructor_query_id_amount_sender_forward_payload($msg'query_id, $msg'amount, $msg'from, $msg'forward_payload))));
    }
    if (($msgValue > 0)) {
        $global_send($SendParameters$_constructor_to_value_body($msg'response_destination, $msgValue, $Excesses$_store_cell($Excesses$_constructor_query_id($msg'query_id))));
    }
    return (($self'balance, $self'owner, $self'master), ());
}

(((int, slice, slice)), ()) $TokenWallet$_internal_binary_Burn((int, slice, slice) $self, (int, int, slice, cell) $msg) impure inline {
    var ($self'balance, $self'owner, $self'master) = $self;
    var ($msg'query_id, $msg'amount, $msg'response_destination, $msg'custom_payload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(4429, ( __tact_slice_eq_bits($ctx'sender, $self'owner) ));
    throw_unless(51724, ($ctx'value > ((20000000 + 20000000) + $Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)))));
    $self'balance = ($self'balance - $msg'amount);
    throw_unless(54227, ($self'balance >= 0));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($self'master, 0, 64, true, $BurnNotification$_store_cell($BurnNotification$_constructor_query_id_amount_response_destination($msg'query_id, $msg'amount, $self'owner))));
    return (($self'balance, $self'owner, $self'master), ());
}

(((int, slice, slice)), ()) $TokenWallet$_receive_binary_bounce_InternalTransfer((int, slice, slice) $self, (int, int) $src) impure inline {
    var ($self'balance, $self'owner, $self'master) = $self;
    var ($src'query_id, $src'amount) = $src;
    $self'balance = ($self'balance + $src'amount);
    return (($self'balance, $self'owner, $self'master), ());
}

(((int, slice, slice)), ()) $TokenWallet$_receive_binary_bounce_BurnNotification((int, slice, slice) $self, (int, int) $src) impure inline {
    var ($self'balance, $self'owner, $self'master) = $self;
    var ($src'query_id, $src'amount) = $src;
    $self'balance = ($self'balance + $src'amount);
    return (($self'balance, $self'owner, $self'master), ());
}

;;
;; Get methods of a Contract TokenWallet
;;

_ %get_wallet_data() method_id(97026) {
    var self = $TokenWallet$_contract_load();
    var res = self~$TokenWallet$_fun_get_wallet_data();
    return $WalletData$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmU7vD669f2ETwi27Zquu6ccjbvqdMVhDPEWiLgbEqmXfD";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract TokenWallet
;;

((int, slice, slice), int) $TokenWallet$_contract_router_internal((int, slice, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        
        ;; Skip 0xFFFFFFFF
        in_msg~skip_bits(32);
        
        ;; Parse op
        int op = 0;
        if (slice_bits(in_msg) >= 32) {
            op = in_msg.preload_uint(32);
        }
        
        ;; Bounced handler for InternalTransfer message
        if (op == 395134233) {
            var msg = in_msg~$InternalTransfer$_load_bounced();
            self~$TokenWallet$_receive_binary_bounce_InternalTransfer(msg);
            return (self, true);
        }
        
        ;; Bounced handler for BurnNotification message
        if (op == 2078119902) {
            var msg = in_msg~$BurnNotification$_load_bounced();
            self~$TokenWallet$_receive_binary_bounce_BurnNotification(msg);
            return (self, true);
        }
        
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Transfer message
    if (op == 260144805) {
        var msg = in_msg~$Transfer$_load();
        self~$TokenWallet$_internal_binary_Transfer(msg);
        return (self, true);
    }
    
    ;; Receive InternalTransfer message
    if (op == 395134233) {
        var msg = in_msg~$InternalTransfer$_load();
        self~$TokenWallet$_internal_binary_InternalTransfer(msg);
        return (self, true);
    }
    
    ;; Receive Burn message
    if (op == 1499400124) {
        var msg = in_msg~$Burn$_load();
        self~$TokenWallet$_internal_binary_Burn(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $TokenWallet$_contract_load();
    
    ;; Handle operation
    int handled = self~$TokenWallet$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $TokenWallet$_contract_store(self);
}
